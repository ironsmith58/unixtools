#!/usr/bin/bash
usage()
{
	cat <<EOF
usage: now [-timedelta|+timedelta]...

now shows the current system tine in seconds since the Unix epoch (1970-01-01)

A timedelta can be be provided as an optional parameter to add or subtract
from now.

A time delta is an integer or floating point number, preceded by a sign, and optionally
suffixed with a time unit.

The timedelta can be given time units as an alphabetic suffix to easily subtract 
hours or days. Suffixes are case-insensitive.  Intermediate timedelta can be
created by providing multiple deltas.

suffixes supported:
	S - seconds # same as no suffix
	M - minutes
	H - hours
	D - days
	W - weeks

Examples:
	$ now -15  # subtract 15 seconds from the current time

	$ now -1d  # subtract 24 hours from the current time

	$ now +1d  # add 24 hours to the current time

	$ now      # show current time

	$ now -4d +1h # show current time 3 days and 23 hours ago
EOF
}

function optionvalue
{
	f=1 # units to seconds factor
	# remove sign char, this always returns the absolute value
	d=$( echo $1| sed 's/[-+]//' )
	case $d in
		*s|*S)
			f=1;;
		*m|*M)
			f=60;;
		*h|*H)
			f=3600;;
		*d|*D) 
			f=86400;;
		*w|*W)
			f=$((86400*7));;
	esac
	# remove any suffix
	d=$( echo $d | sed 's/[sSmMhHdDwW].*$//' )
	echo $(( d * f ))
}


if [[ $1 == -h || $1 == --help ]]
then
	usage
	exit 0
fi

debug="true"
if [[ $1 == -d ]]
then
	debug="echo"
	shift
fi

$debug processing command line $*
delta=0
for d in $*
do
	case $d in 
		-*) 
			td=$( optionvalue $d )
			$debug delta $d '=>' $td
			delta=$(( delta - td ));;
		+*|[0-9]*) 
			td=$( optionavalue $d )
			$debug delta $d '=>' $td
			delta=$(( delta +  td ));;
	esac
done


now=$(date +%s)

echo $(( $now + $delta ))
